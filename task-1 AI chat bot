
import math

# Constants for the game
HUMAN = 'O'
AI = 'X'
EMPTY = ' '

# Create initial 3x3 board
def init_board():
    return [[EMPTY for _ in range(3)] for _ in range(3)]

# Print board
def draw(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 5)

# Check for winner or tie
def check_winner(board):
    lines = []

    # Rows, Columns and Diagonals
    lines.extend(board)
    lines.extend([[board[r][c] for r in range(3)] for c in range(3)])
    lines.append([board[i][i] for i in range(3)])
    lines.append([board[i][2 - i] for i in range(3)])

    for line in lines:
        if all(cell == AI for cell in line):
            return AI
        if all(cell == HUMAN for cell in line):
            return HUMAN

    if all(cell != EMPTY for row in board for cell in row):
        return 'TIE'
    
    return None

# Get all available moves
def get_moves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == EMPTY]

# Minimax with alpha-beta pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    winner = check_winner(board)
    if winner == AI:
        return 10 - depth
    elif winner == HUMAN:
        return depth - 10
    elif winner == 'TIE':
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for r, c in get_moves(board):
            board[r][c] = AI
            score = minimax(board, depth + 1, False, alpha, beta)
            board[r][c] = EMPTY
            max_eval = max(max_eval, score)
            alpha = max(alpha, score)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for r, c in get_moves(board):
            board[r][c] = HUMAN
            score = minimax(board, depth + 1, True, alpha, beta)
            board[r][c] = EMPTY
            min_eval = min(min_eval, score)
            beta = min(beta, score)
            if beta <= alpha:
                break
        return min_eval

# Find best move for AI
def best_move(board):
    move = None
    best_score = -math.inf
    for r, c in get_moves(board):
        board[r][c] = AI
        score = minimax(board, 0, False, -math.inf, math.inf)
        board[r][c] = EMPTY
        if score > best_score:
            best_score = score
            move = (r, c)
    return move

# Main game loop
def play_game():
    board = init_board()
    print("Welcome to Tic-Tac-Toe!")
    first = input("Do you want to go first? (y/n): ").lower().startswith('y')
    
    game_over = False
    while not game_over:
        draw(board)
        
        if first:
            try:
                r, c = map(int, input("Enter row and column (0-2): ").split())
            except ValueError:
                print("Invalid input. Use two numbers between 0 and 2.")
                continue

            if not (0 <= r < 3 and 0 <= c < 3) or board[r][c] != EMPTY:
                print("Invalid move, try again.")
                continue
            board[r][c] = HUMAN
        else:
            print("AI is thinking...")
            r, c = best_move(board)
            board[r][c] = AI

        winner = check_winner(board)
        if winner:
            draw(board)
            if winner == 'TIE':
                print("It's a tie!")
            else:
                print(f"{winner} wins!")
            game_over = True
        first = not first

if __name__ == "__main__":
    play_game()
